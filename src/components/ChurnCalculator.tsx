
import React, { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { calculateROI, formatCurrency, formatNumber, formatPercent } from "@/utils/churnCalculator";
import { HelpCircle } from "lucide-react";
import { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";

interface ROIResults {
  currentChurnRate: number;
  reducedChurnRate: number;
  monthlySavings: number;
  annualSavings: number;
  roi: number;
}

const ChurnCalculator = () => {
  const [customerCount, setCustomerCount] = useState(1000);
  const [averageRevenuePerCustomer, setAverageRevenuePerCustomer] = useState(50);
  const [currentChurnRate, setCurrentChurnRate] = useState(5);
  const potentialChurnReduction = 0.30;
  const [results, setResults] = useState<ROIResults | null>(null);
  const [showPercentage, setShowPercentage] = useState(false);

  useEffect(() => {
    calculateAndUpdateResults();
  }, [customerCount, averageRevenuePerCustomer, currentChurnRate]);

  const calculateAndUpdateResults = () => {
    const calculatedResults = calculateROI({
      customerCount,
      averageRevenuePerCustomer,
      currentChurnRate,
      potentialChurnReduction,
    });
    setResults(calculatedResults);
  };

  const handleInputChange = (setter: React.Dispatch<React.SetStateAction<number>>, value: string, min: number, max: number) => {
    const numValue = parseFloat(value) || min;
    setter(Math.min(Math.max(numValue, min), max));
  };

  const InfoTooltip = ({ content }: { content: string }) => (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger className="cursor-help">
          <HelpCircle className="h-4 w-4 text-gray-400" />
        </TooltipTrigger>
        <TooltipContent side="right" align="start" className="max-w-[250px]">
          <p>{content}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:gap-8">
      <Card className="md:col-span-1">
        <CardHeader>
          <CardTitle>Churn Reduction Calculator</CardTitle>
          <CardDescription>
            Estimate your savings from reducing customer churn.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="calculator-input">
            <div className="flex items-center justify-between">
              <Label htmlFor="customer-count" className="calculator-label">
                Number of Customers
              </Label>
              <InfoTooltip content="The total number of customers." />
            </div>
            <div className="flex items-center gap-4">
              <Slider
                id="customer-count"
                min={100}
                max={5000}
                step={100}
                value={[customerCount]}
                onValueChange={(value) => setCustomerCount(value[0])}
                className="flex-1"
              />
              <Input
                type="number"
                value={customerCount}
                onChange={(e) => handleInputChange(setCustomerCount, e.target.value, 100, 5000)}
                className="w-24"
              />
            </div>
            <span className="calculator-value-display">
              {formatNumber(customerCount)} customers
            </span>
          </div>

          <div className="calculator-input">
            <div className="flex items-center justify-between">
              <Label htmlFor="average-revenue" className="calculator-label">
                Average Revenue per Customer (USD/month)
              </Label>
              <InfoTooltip content="The average monthly revenue generated by each customer." />
            </div>
            <div className="flex items-center gap-4">
              <Slider
                id="average-revenue"
                min={10}
                max={200}
                step={1}
                value={[averageRevenuePerCustomer]}
                onValueChange={(value) => setAverageRevenuePerCustomer(value[0])}
                className="flex-1"
              />
              <Input
                type="number"
                value={averageRevenuePerCustomer}
                onChange={(e) => handleInputChange(setAverageRevenuePerCustomer, e.target.value, 10, 200)}
                className="w-24"
              />
            </div>
            <span className="calculator-value-display">
              {formatCurrency(averageRevenuePerCustomer)}/month
            </span>
          </div>

          <div className="calculator-input">
            <div className="flex items-center justify-between">
              <Label htmlFor="current-churn" className="calculator-label">
                Current Churn Rate
              </Label>
              <InfoTooltip content="Your current customer churn rate as a percentage." />
            </div>
            <div className="flex items-center gap-4">
              <Slider
                id="current-churn"
                min={1}
                max={20}
                step={1}
                value={[currentChurnRate]}
                onValueChange={(value) => setCurrentChurnRate(value[0])}
                className="flex-1"
              />
              <Input
                type="number"
                value={currentChurnRate}
                onChange={(e) => handleInputChange(setCurrentChurnRate, e.target.value, 1, 20)}
                className="w-24"
              />
            </div>
            <span className="calculator-value-display">
              {currentChurnRate}%
            </span>
          </div>

          <div className="calculator-input">
            <div className="flex items-center justify-between">
              <Label htmlFor="churn-reduction" className="calculator-label">
                Potential Churn Reduction
              </Label>
              <InfoTooltip content="The percentage reduction in churn rate you expect to achieve." />
            </div>
            
            <span className="calculator-value-display">
              {formatPercent(potentialChurnReduction)}
            </span>
          </div>
        </CardContent>
      </Card>

      <Card className="md:col-span-1">
        <CardHeader>
          <CardTitle>Retained revenue</CardTitle>
          <CardDescription>
            Based on your inputs, here's your potential impact on your revenue
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {results && (
            <div className="space-y-6 animate-fade-in">
              <div className="space-y-4">
                <div className="flex justify-between items-center border-b pb-2">
                  <span className="text-sm text-gray-600">Monthly avoided churn customers</span>
                  <span className="font-medium">{formatNumber(Math.round(customerCount * (currentChurnRate - results.reducedChurnRate)))}</span>
                </div>
                <div className="flex justify-between items-center border-b pb-2">
                  <span className="text-sm text-gray-600">Monthly retained revenue</span>
                  <span className="font-medium">{formatCurrency(results.monthlySavings)}</span>
                </div>
                <div className="flex justify-between items-center border-b pb-2">
                  <span className="text-sm text-gray-600">Product Fruits monthly plan</span>
                  <span className="font-medium text-red-600">-{formatCurrency(299)}</span>
                </div>
                <div className="flex justify-between items-center border-b pb-2">
                  <span className="text-sm text-gray-600">Net MRR increase</span>
                  <span className="font-medium">{formatCurrency(results.monthlySavings - 299)}</span>
                </div>
              </div>
              
              <div className="pt-4 flex justify-center items-center">
                <div className="text-center">
                  <p className="text-sm text-gray-500">Net ARR increase</p>
                  <p className="text-[28pt] font-bold text-green-600">
                    {formatCurrency((results.monthlySavings - 299) * 12)}
                  </p>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default ChurnCalculator;
